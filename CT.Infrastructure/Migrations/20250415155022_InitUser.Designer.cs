// <auto-generated />
using System;
using CT.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CT.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250415155022_InitUser")]
    partial class InitUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CT.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CT.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CT.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("054bc9a7-609e-417c-a08d-f3edcf66365f"),
                            CreatedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5277),
                            ImageUrl = "images/macarons/purple.png",
                            IsDeleted = false,
                            ModifiedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5278),
                            Name = "Purple Macaron",
                            Price = 2.50m,
                            Type = "Individually"
                        },
                        new
                        {
                            Id = new Guid("08f35a7b-f8e8-48f3-8596-60e157c072a3"),
                            CreatedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5282),
                            ImageUrl = "images/macarons/set2.png",
                            IsDeleted = false,
                            ModifiedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5282),
                            Name = "Macaron set #2",
                            Price = 10.00m,
                            Type = "Individually"
                        },
                        new
                        {
                            Id = new Guid("0ea0c77b-5389-418c-bc39-aa53c7faf1d0"),
                            CreatedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5295),
                            ImageUrl = "images/macarons/set6.png",
                            IsDeleted = false,
                            ModifiedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5296),
                            Name = "Macaron set #6",
                            Price = 10.00m,
                            Type = "Individually"
                        },
                        new
                        {
                            Id = new Guid("35eb441d-8162-46b8-a9e4-f467639b41c1"),
                            CreatedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(4986),
                            ImageUrl = "images/macarons/orange.png",
                            IsDeleted = false,
                            ModifiedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5136),
                            Name = "Orange Macaron",
                            Price = 2.50m,
                            Type = "Individually"
                        },
                        new
                        {
                            Id = new Guid("3e12e305-73fb-4476-a9a7-d70d7a8d1798"),
                            CreatedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5291),
                            ImageUrl = "images/macarons/set4.png",
                            IsDeleted = false,
                            ModifiedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5291),
                            Name = "Macaron set #4",
                            Price = 10.00m,
                            Type = "Individually"
                        },
                        new
                        {
                            Id = new Guid("6d7d7c4b-188c-4811-9e78-65eb0d24e00e"),
                            CreatedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5273),
                            ImageUrl = "images/macarons/red.png",
                            IsDeleted = false,
                            ModifiedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5273),
                            Name = "Red Macaron",
                            Price = 2.50m,
                            Type = "Individually"
                        },
                        new
                        {
                            Id = new Guid("78bcfa91-cf39-4553-804e-3b6fc30e092b"),
                            CreatedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5271),
                            ImageUrl = "images/macarons/pink.png",
                            IsDeleted = false,
                            ModifiedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5271),
                            Name = "Pink Macaron",
                            Price = 2.50m,
                            Type = "Individually"
                        },
                        new
                        {
                            Id = new Guid("9cc9b4f4-c5a6-4c05-b471-336bd8b96794"),
                            CreatedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5280),
                            ImageUrl = "images/macarons/set1.png",
                            IsDeleted = false,
                            ModifiedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5280),
                            Name = "Macaron set #1",
                            Price = 10.00m,
                            Type = "Individually"
                        },
                        new
                        {
                            Id = new Guid("9f0d7ccd-94c8-4efc-890c-0c870c1964c6"),
                            CreatedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5275),
                            ImageUrl = "images/macarons/dark.png",
                            IsDeleted = false,
                            ModifiedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5276),
                            Name = "Dark Macaron",
                            Price = 2.50m,
                            Type = "Individually"
                        },
                        new
                        {
                            Id = new Guid("e00af05d-272a-4c9e-9383-c6b1853e4e3d"),
                            CreatedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5293),
                            ImageUrl = "images/macarons/set5.png",
                            IsDeleted = false,
                            ModifiedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5294),
                            Name = "Macaron set #5",
                            Price = 10.00m,
                            Type = "Individually"
                        },
                        new
                        {
                            Id = new Guid("f2361fd0-134d-4a7c-b4a5-e7948e19c0d0"),
                            CreatedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5289),
                            ImageUrl = "images/macarons/set3.png",
                            IsDeleted = false,
                            ModifiedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5289),
                            Name = "Macaron set #3",
                            Price = 10.00m,
                            Type = "Individually"
                        },
                        new
                        {
                            Id = new Guid("fd6032c5-7592-42cb-b16e-c25633043a24"),
                            CreatedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5269),
                            ImageUrl = "images/macarons/green.png",
                            IsDeleted = false,
                            ModifiedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc).AddTicks(5269),
                            Name = "Green Macaron",
                            Price = 2.50m,
                            Type = "Individually"
                        });
                });

            modelBuilder.Entity("CT.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Token");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("CT.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefaultPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07f1348e-5b4c-4f21-a38a-9c7d493cf625"),
                            CreatedBy = "DbContextInitializer",
                            CreatedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc),
                            DefaultAddress = "",
                            DefaultPhoneNumber = "",
                            Email = "test@test.com",
                            IsDeleted = false,
                            ModifiedBy = "DbContextInitializer",
                            ModifiedDateUtc = new DateTime(2025, 4, 15, 9, 43, 28, 725, DateTimeKind.Utc),
                            Name = "Test",
                            PasswordHash = "AQAAAAEAACcQAAAAEK3lyWfqNrzQ0P109198vqCfSb4EdhlF2EprWMW9aXYsQnEp4tx3vnYQLZGuebYClg=="
                        });
                });

            modelBuilder.Entity("CT.Domain.Entities.Order", b =>
                {
                    b.HasOne("CT.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CT.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("CT.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CT.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CT.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("CT.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CT.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CT.Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
